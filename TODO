----------Addictgamer----------

Not necessarily in this order.

1. Look through the code and find the all the "TODO:"s, and do them.

4. Make a real map creator.

6. Un-hardcode pretty much everything that can (and should) be un-hardcoded.

13. Pathfinding...

14. Documentate the code.

16. Tell each tile (on creation) what the locations in the map array of the tiles to the left/right/up/down/diagonals are. If it is needed.

17. Texture reload button.

21. Allow tabs to seperate tile IDs in the map files.

22. Port buildings to new system.

28. Program liquids.

30. Program collecting resources and using them.

31. Program vehicles.

32. If you click and hold, have raider follow cursor.

34. Allow changing resolutions and between fullscreen and window mode while in-game.

37. Unhardcode tile size.

40. Make a 'load level' button on the title screen.

42. Currently, the number of tools a unit can start out carrying is hard coded to 1. Change the limit to the unit's carrying capacity.

43. Add a carrying capacity to units.

44. When a unit is selected, make it show all the tools it's carrying, and all the Ore and Energy Crystals it's carrying.

45. Add a mass unit select feature.

46. Add a mass designation set feaure.

47. Add an ore and an energy crystal map.

48. Add support for "drilling ground".

50. Make units pick up ore and energy crystals.

51. Implement temperature maps.

52. Implement temperature.

54. Display a message saying, "Whee, moving." while a unit is moving. If wanted.

57. Seems to me something in the install scripts or run scripts messed up. Fix whatever's wrong.
NOTE: After further testing, running sudo orr-c works. Remove the need for sudo so that you don't need to be root to play ORR.

59. Pretty up the interface.

61. Update the unit select function to use the ID grabbed by the left click check in the update loop.

63. Create popup menus.

64. Make the draw_inventory function of the unit draw the text on top of the map.
//Little idea on how to do it...
SDL_Surface *inventory_spr = null;
draw(0, 0, inventory_message_spr, inventory_spr);
draw_all_carried_items_onto_inventory_spr_too();
//Now, in interface update or something...
draw(0, SCREEN_HEIGHT - inventory_spr->h, inventory_spr, screen);

//Another idea:
//When assigning units their tools, add the unit to a draw_sprite_on_top que or something.

65. Um...Use zlib for memory compression or something?

67. Certain places could do better with the for being changed to a while.

69. Make which worker/helper threads are reserved for what controlled by the config file.

71. Multithreading works now! BUT. The screen likes to flicker. Fix this. And, when using wasd to move the camera around, it likes to fly thousands of pixels in the specified direction...

72. Add a pthreads_trylock() thing to every spot where something is drawn to the screen?

74. Unhardcode tile size! - Yes, emphasized...

75. Create a thread that handles keypresses...
Maybe for checking repeating keypresses, do this:
//--------------
int ms_for_repeat; //or frames...or seconds...

run_keycheck_thread()
{
	if(keystates(keyname) && can_repeat == true)
	{
		can_repeat = false;
		do_stuff();
	}
	if(write_something_to_check_if_its_time_to_make_something_that_can_set_can_repeat_to__true)
	{
		can_repeat = true;
	}
}
//--------------



78. Add animations all over the place. Everybody likes eye candy!

80. Time based messages, in addition to the current frame based ones.

81. Allow -1 to be accepted as a value for number of threads. It lets the game know that it can use an infinite number of threads.

82. Plop all the unit's stuff that require the unit to be selected into it's own broad check. Saves on some cpu later on when many units are in the level.

84. Here's a bug: If, in the config file, I change GENERATE_ORE_ON_MINE to false, it still thinks it's set to true. Fix this bug.

87. Add the option for mouse scrolling. And don't forget to limit how far offscreen the camera can move if mouse scrolling is enabled.

91. Change all the tile types, unit types, tool types, etc, to be stored in a std::map. Unless it's better to just stick with vectors...

92. Change the Map itself to be stored in a std::map with ID as their key?

93. Raider walking animations.

94. Raider walking around in the tile...

95. Make it easy to handle multiple raiders on a tile.

96. Raider activity animations.

98. Advanced constructions.

99. Buildings.

100. Bases.

101. Make a constructions menu.

104. Program stockpiles.

105. Change the bool mining and all similar stuff in units to use the job_state variable.

107. Exception handling.

108. Use auto_ptr...If needed.

111. Allow for switching of 3d and 2d gfx ingame.

112. Allow walls, objects, everything, to be dynamically changed graphically. For example, as the raider drills, the wall gets actual cracks in 3D mode. Not just lines in the texture. When a wall collapses, account for all the pieces.

113. The network update thread in the server pauses whenever a client connects. Fix this.

114. The server needs a better interface

115. Write a wrapper for the client socket. It contains the client socket itself, and data on it, like the team the client belongs to and whatnot.

116. Get clients connecting and send them the info they need.

117. Create a "lobby" screen (to replace the current game menu) to set options.

118. Write my own sdl_ttf sort of thing.

119. Create a global cfg parsing function that reads all the values into a vector of value classes then returns that to the caller for the caller to use it for whatever. Make sure to add a "verbose" option.

120. Rewrite new to allocate virtual memory on the hard drive once RAM is full. If enabled in the cfg.

122. Create a drawing manager that allows for depth drawing. THis way, interface will always be on top.

123. Raider drilling animations.

125. Make the location of the "Press enter to enter the test level" text configurable via the interface CFG.

126. When you select a unit, highlight the like you gave them a command to do blablabla on. Maybe simply draw an icon above it. (I like the idea of that...)

127. When a shovel command is issued on rubble, or a drill command on a wall, or a construction command on a tile. Signify this. Maybe highlight the tile or something.

129. Add a "GROUND" paramater to the tile types.

130. Whenever the orelist of the tile is expanded, add the "pickup any ore" field to the tile's rubble_popup_menu or the ground_popup_menu (depending on what type of tile it is).

131. Update the job_que to be a linked list.

132. Update the map to be a binary tree (pretty much a linked list).

133. Put units in their own global linked list. Tiles will simply have a vector of pointers to all the units on them.

134. Implement 2D lighting.

135. Give the raider a moving animation.

136. Implement a "allow_unit_selection_turn_to_true_next_frame", which is pretty much a variable that is checked at every frame's start to see if it is true. If it is true, then set allow_unit_selection to true.

137. Make units close doors behind themselves.

138. Check to make sure the tile is still ruble before shovelling it. (Likewise for mining)

139. Add the smart ai variable.

140. Make the find_job code take the smart ai variable into account.

141. Sometimes the same path is added twice into the movepath. Fix this.

142. Use this sort of thing when calculating draw_map:
if(start_row_is_not_first_row)
{
	start_row_id -= number_of_tiles_per_row;
}
calculate_draw_map();

143. Ensure units don't build stuff on a tile that already has something in the process of getting built.

144. "pickup all ore" field. Pretty much loops over and over again and adds a "pickup any ore" job for each ore it finds on the tile.

145. To make the teleporter teleport in a radius, use this code:
int num_move_left = 4;
while(num_move_left >= 0)
{
	if(get_random() == 25 % chance)
	{
		num_move_left = 0;
	}
}
#145b.
Actually, remove the num_move_left thing;
while(rand(blarg)) //Get a random true or false.
{
	tile_to_teleport_on = blarg_tile;
}
//The chance of getting a true or a false varies by teleporter strength. The more strength, the higher the chance it'll return false (which means it hath found a tile). And which also means higher accuracy.

148. Remove the animations vector from the constructions and tiles and instead do what I did with units.

149. Instead of giving every sprite a selected version, simply overlay the sprite with the green selection box if it's selected.

150. Make the close_door variables of the unit vectors, so that the unit will be able to handle multiple close door tasks.

151. Make every game object use sprite_wrapper for its sprites instead of the current direct SDL_Surface.

152. Make the unit check if the door is already being opened. If it is, then just sit there waiting for it to finish being opened. Afterwards, this unit does not have to close the door; the unit that opened the door must stop being lazy and do its job for once.

153. Give units a direction and make the sprites show the direction they're facing.

154. Move the check neighbours code in map/construct_construction.cpp to the construction's code.

155. Change rubble from a tile type to objects that are on a tile.

156. Allow multiple threads to check jobs at the same time.



--Done--

2. Finish the map layer parser. - DONE

3. Write the map drawing code. And map navigation code. - DONE

5. Un-hardcode the tile types. - DONE

7. Make all sprites be loaded on startup. - DONE

10. Create a loading screen - DONE

11. Create a main menu/title screen.

12. Make the game write everything it gernerally outputs to the command line to a log file instead. - DONE

18. Fix movement bugs. - DONE

19. Implement "Click and move". - DONE

20. Re-add the ability to select units. - DONE

23. Finish map code. - DONE

24. Finish movement. - DONE

25. Add real pathfinding. - DONE

26. Program ramps (allows movent between layers). - DONE

27. Program walls. - DONE

29. Program mining a wall. - DONE

33. Get sound in the game. - DONE
svn commit -m "" --password rH9FK2xY2zd5
35. Print (In game, not console) what layer the camera currently is on. - DONE

36. Finish movement between layers. - DONE

39. Change map to vector. Change unitlist to vector. - DONE

41. Create a job que... - DONE

49. Air tiles. - DONE

53. Make the unit carry over it's inventory when it moves between tiles... - DONE

55. Display a message saying, "Whee, mining." while a unit is mining. - DONE

56. Make 'drill times' - DONE

58. Rewrite the unit type stuff to be like the others. - DONE

60. Create a 'message' class. Has the following data, for example: - DONE
int wx;
int wy;
std::string message_str;
SDL_Surface *rendered_message;

62. Add support for 2D animations. - DONE.

66. Increase game performance. Maybe add tiles that are offscreen and have nothing on them to an 'ignore' or 'inactive' list or flag them as inactive/igorned? - DONE

68. In the terrain.cfg files and the like, make the [] part be used as the ID of the object. - DONE

70. The graphics functions are absolutely horrid. They mercilessly eat the cpu. FIX THIS!!!! - DONE.

73. Create "shovelling stages" and "mining stages". I'm referring to image stuff.
So, every x health lost, it scrolls to the next specified image.
Hehehe, cheap animation! - CANCELLED. FOund better way.

76. Change the health variable for tiles to be a vector... - DONE

77. Change walls to have a series of drill stages (and trees too?), like rubble, that there may be basic 'animation'. I think it work better than TODO item 73. - DONE

79. Implement optimisation 1. - DONE

83. Make the unit say, "I'mma shovel some rubble!" - DONE

85. There are some random segfaults when shovelling rubble. FIX THIS ASAP. - DONE

86. Here's a queer bug: any raiders after a raider with a shovel (when placed in the ol) glitch badly with their tool... - DONE. Turns out some important variables were not reset.

88. When a unit tried to cross a tile that has a unit allready on it, SEG FAULT! According to debugging, unitlist gets corrupted or something. - DONE. Was an easier fix than I thought it would be.

89. Fix the animation crash... - DONE.

90. Making a tool deconstructor might work in fixing the free(): invalid next size error. Try it. - DONE. This was part of the problem I think...

97. Basic constructions. - DONE

102. Implement that job que. - DONE. Yes, it is a repeat.

103. Implement that "ore on map" thing. - DONE.

106. The reason the game kept crashing when there was the "SDL_FreeSurface" thing in the unit's deconstructor was that it was freeing the actual image from the unit type. So, make sure to free all the surfaces at the end of the program and only in the unit type. For each individual unit, simply set the surface pointer to NULL. - DONE

109. Check to make sure that the tile doesn't have an existing construction on it. - DONE

110. Combine client and server. How? Same thing as with 3D and 2D mode. bool server - DONE

121. Messages stay onscreen one frame too long. Fix this - DONE

124. Make walls not be buildable on rubble. And, probably, quite a few other constructions. - DONE.

128. Take the repositioning code (seen in the unit's construct_construction.cpp, for example) and put it into it's own function so that it deson't have to be rewritten 100 times. - DONE.

130. Make the unit go to the closest job. - DONE.

146. Currently, when a tile with a teleporter is clicked on, the active tile seems to get stuck or something. It'll always think that tile is selected for the popup menus. - DONE.

147. Somehow, when a unit is teleported in, a nonexistant tile is added to the active map...

Expanding on 147:
Turns out after the teleported unit is told to move, and there are two units on the tile, the game will get an insanely large value added into the active map for some reason. - DONE.



--Cancelled--

8. Make the spritelist thing work - CANCELLED

9. Populate unitlist with the name of all the unit types on program startup... - CANCELLED





---------Releases-------------
Alpha 0.0.4.x or 0.0.5:
Get everything construction and base making related done.
Animations.
Better UI.

Alpha 0.0.3.x or 0.0.4:
ALL bugs, crashes, glitches, memleaks, and the like fixed.
Constructions done.
Making bases done.
Teleportation is a goal.
Animate stuff that need animating.
Results:
All known bugs, crashes, glitches, memleaks, and the like, fixed.
Door and Wall constructions done.
Bases not made.
No teleportation.
No new animations.

End of 2010 alpha:
Finish pathfinding.
Reimplement buildings.
Implement mining.
Reimplement teleporting.
Implement simple level goals.
Implement 'load map'.
Implement a better UI.
And whatever else we can do before christmas/new years.
Results: Buildings not re-implemented.
Mining implemented.
Teleporting not reimplemented.
Simple level goals not implemened.
'load map' not implemented.
A better UI did, sort of, get implemented.
